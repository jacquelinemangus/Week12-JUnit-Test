
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.junit.jupiter.api.Assertions.*;

import java.util.stream.Stream;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import static org.junit.jupiter.params.provider.Arguments.arguments; 
import org.junit.jupiter.params.provider.MethodSource;




class TestDemoJUnitTest {
	
	private TestDemo testDemo;

	@BeforeEach
	void setUp() throws Exception {
	testDemo = new TestDemo();
	}

	@ParameterizedTest
	@MethodSource("TestDemoJUnitTest#argumentsForAddPositive")
	void assertThatTwoPositiveNumbersAreAddedCorrectly
	(int a, int b, int expected, boolean expectException) {
		if(!expectException) {
			assertThat(testDemo.addPositive(a, b)).isEqualTo(expected);
		} else {
			assertThatThrownBy(() -> 
		    testDemo.addPositive(a, b))
		        .isInstanceOf(IllegalArgumentException.class);

		}
	}
	static Stream <Arguments> argumentsForAddPositive() {
		return(Stream.of(arguments(1, 2, 3, false)));
	}
@Test 
void assertThatPairsOfPositiveNumbersAreAddedCorrectly() {
	assertThat(testDemo.addPositive(4,5)).isEqualTo(9);
	assertThat(testDemo.addPositive(40,50)).isEqualTo(90);
	
	
	
}
//	private static Object randomNumberSquared() {
//	
//		return null;
//	}
}
	
	
	


